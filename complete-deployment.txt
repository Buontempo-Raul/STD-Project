---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  AI_BACKEND_PORT: "89"
  AI_USE_MOCK_DATA: "false"
  CHAT_BACKEND_PORT: "88"
  CHAT_FRONTEND_PORT: "90"
  AI_FRONTEND_PORT: "91"
  APP_URL: "http://4.213.180.54" # Replace with your actual public IP
  APP_ENV: "production"
  APP_DEBUG: "true" # Changed to true for debugging
  DB_CONNECTION: "sqlite"
  STORAGE_CONTAINER: "face-images"
---
# MongoDB Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
# AI Backend Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-backend-temp
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
# Statamic Storage Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-storage
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-content
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-resources
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
# Statamic Bootstrap Cache PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-bootstrap-cache
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: microk8s-hostpath
---
# Statamic Database PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-database
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: microk8s-hostpath
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:4.4
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-password
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: default
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
# Chat Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-backend
  namespace: default
spec:
  replicas: 5
  selector:
    matchLabels:
      app: chat-backend
  template:
    metadata:
      labels:
        app: chat-backend
    spec:
      containers:
      - name: chat-backend
        image: raulbuontempo/chat-backend:latest
        ports:
        - containerPort: 88
        env:
        - name: PORT
          value: "88"
        - name: MONGODB_URI
          value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@mongodb:27017/chat?authSource=admin"
        - name: MONGODB_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-username
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-password
        resources:
          limits:
            cpu: "300m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
---
# Chat Backend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-backend
  namespace: default
spec:
  selector:
    app: chat-backend
  ports:
  - port: 88
    targetPort: 88
  type: ClusterIP
---
# Chat Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-frontend
  template:
    metadata:
      labels:
        app: chat-frontend
    spec:
      containers:
      - name: chat-frontend
        image: raulbuontempo/chat-frontend:latest
        ports:
        - containerPort: 90
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
---
# Chat Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend
  namespace: default
spec:
  selector:
    app: chat-frontend
  ports:
  - port: 90
    targetPort: 90
  type: ClusterIP
---
# AI Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-backend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-backend
  template:
    metadata:
      labels:
        app: ai-backend
    spec:
      containers:
      - name: ai-backend
        image: raulbuontempo/ai-backend:latest
        ports:
        - containerPort: 89
        env:
        - name: PORT
          value: "89"
        - name: USE_MOCK_DATA
          value: "false"
        - name: STORAGE_CONTAINER
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: storage_container
        - name: AZURE_STORAGE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: storage-connection-string
        - name: FACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: face-api-key
        - name: FACE_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: face-api-endpoint
        - name: SQL_USER
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-user
        - name: SQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-password
        - name: SQL_SERVER
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-server
        - name: SQL_DB
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-db
        volumeMounts:
        - name: ai-backend-temp
          mountPath: /app/temp
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
      volumes:
      - name: ai-backend-temp
        persistentVolumeClaim:
          claimName: ai-backend-temp
---
# AI Backend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-backend
  namespace: default
spec:
  selector:
    app: ai-backend
  ports:
  - port: 89
    targetPort: 89
  type: ClusterIP
---
# AI Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-frontend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-frontend
  template:
    metadata:
      labels:
        app: ai-frontend
    spec:
      containers:
      - name: ai-frontend
        image: raulbuontempo/ai-frontend:latest
        ports:
        - containerPort: 91
        env:
        - name: REACT_APP_API_URL
          value: "/api" # Use the relative path via ingress
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
---
# AI Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend
  namespace: default
spec:
  selector:
    app: ai-frontend
  ports:
  - port: 91
    targetPort: 91
  type: ClusterIP
---
# Init ConfigMap with fix-permissions script
apiVersion: v1
kind: ConfigMap
metadata:
  name: statamic-init-scripts
  namespace: default
data:
  fix-permissions.sh: |-
    #!/bin/sh
    set -e
    echo "Creating Laravel/Statamic directory structure..."
    mkdir -p /var/www/html/bootstrap/cache
    mkdir -p /var/www/html/storage/framework/cache
    mkdir -p /var/www/html/storage/framework/sessions
    mkdir -p /var/www/html/storage/framework/views
    mkdir -p /var/www/html/storage/app/public
    
    echo "Setting correct permissions..."
    chmod -R 777 /var/www/html/bootstrap
    chmod -R 777 /var/www/html/storage
    
    echo "Directory structure and permissions set!"
---
# Simplified Statamic Deployment with cache fix
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statamic
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: statamic
  template:
    metadata:
      labels:
        app: statamic
    spec:
      initContainers:
      - name: fix-permissions
        image: alpine:3.15
        command: ["/bin/sh", "/scripts/fix-permissions.sh"]
        volumeMounts:
        - name: bootstrap-cache
          mountPath: /var/www/html/bootstrap
        - name: storage
          mountPath: /var/www/html/storage
        - name: scripts
          mountPath: /scripts
      containers:
      - name: statamic
        image: raulbuontempo/statamic:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: APP_ENV
          value: "production"
        - name: APP_DEBUG
          value: "true"
        - name: APP_KEY
          valueFrom:
            secretKeyRef:
              name: statamic-credentials
              key: app-key
        - name: APP_URL
          value: "http://localhost"
        - name: DB_CONNECTION
          value: "sqlite"
        volumeMounts:
        - name: bootstrap-cache
          mountPath: /var/www/html/bootstrap
        - name: storage
          mountPath: /var/www/html/storage
        - name: content
          mountPath: /var/www/html/content
        - name: resources
          mountPath: /var/www/html/resources
        resources:
          limits:
            cpu: "600m"
            memory: "512Mi"
          requests:
            cpu: "300m"
            memory: "256Mi"
      volumes:
      - name: bootstrap-cache
        emptyDir: {}
      - name: storage
        emptyDir: {}
      - name: content
        emptyDir: {}
      - name: resources
        emptyDir: {}
      - name: scripts
        configMap:
          name: statamic-init-scripts
          defaultMode: 0777
---
# Statamic Service
apiVersion: v1
kind: Service
metadata:
  name: statamic
  namespace: default
spec:
  selector:
    app: statamic
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# LoadBalancer Service to expose Statamic directly
apiVersion: v1
kind: Service
metadata:
  name: web-app
  namespace: default
spec:
  selector:
    app: statamic
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# Simplified Ingress configuration without complex rewrites
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: statamic
            port:
              number: 80
      - path: /chat
        pathType: Prefix
        backend:
          service:
            name: chat-frontend
            port:
              number: 90
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: chat-backend
            port:
              number: 88
      - path: /ai
        pathType: Prefix
        backend:
          service:
            name: ai-frontend
            port:
              number: 91
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ai-backend
            port:
              number: 89