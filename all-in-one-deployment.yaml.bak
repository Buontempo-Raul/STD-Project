# All-in-one deployment for the website with chat and AI over Kubernetes
# This single file contains all necessary resources for deployment

---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
data:
  mongodb-root-username: cm9vdA== # 'root' encoded in base64
  mongodb-root-password: ZXhhbXBsZQ== # 'example' encoded in base64

---
# Azure Secret (pre-filled with placeholders - to be updated with actual credentials)
apiVersion: v1
kind: Secret
metadata:
  name: azure-secrets
type: Opaque
data:
  storage-connection-string: IyEvYmluL2Jhc2g=
  face-api-key: 
  face-api-endpoint: aHR0cHM6Ly9zdGQtZmFjZS1kZXRlY3Rpb24uY29nbml0aXZlc2VydmljZXMuYXp1cmUuY29tLw== # Update this with actual value
  sql-user: 
  sql-password: IyBDaGVjayBpZiBhbGwtaW4tb25lLWRlcGxveW1lbnQueWFtbCBleGlzdHM=
  sql-server: aWYgWyAhIC1mICJhbGwtaW4tb25lLWRlcGxveW1lbnQueWFtbCIgXTsgdGhlbg==
  sql-db: ZWNobyAiRXJyb3I6IGFsbC1pbi1vbmUtZGVwbG95bWVudC55YW1sIGZpbGUgbm90IGZvdW5kLiI=

---
# ConfigMap for Statamic iframe integration
apiVersion: v1
kind: ConfigMap
metadata:
  name: statamic-iframe-integration
data:
  iframe-integration.blade.php: |
    <div class="container mx-auto my-8 p-4">
      <h1 class="text-3xl font-bold mb-8">Sistem Integrat de Chat și Detecție Facială</h1>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Chat Component -->
        <div class="border rounded-lg shadow-lg p-4 bg-white">
          <h2 class="text-xl font-semibold mb-4">Chat în Timp Real</h2>
          <div class="aspect-w-16 aspect-h-9">
            <iframe 
              src="http://{{ $_SERVER['HTTP_HOST'] }}/chat" 
              class="w-full h-96 border-0" 
              title="Chat Application"
              allow="microphone; camera"
              loading="lazy">
            </iframe>
          </div>
        </div>
        
        <!-- AI Face Detection Component -->
        <div class="border rounded-lg shadow-lg p-4 bg-white">
          <h2 class="text-xl font-semibold mb-4">Detecție Facială cu AI</h2>
          <div class="aspect-w-16 aspect-h-9">
            <iframe 
              src="http://{{ $_SERVER['HTTP_HOST'] }}/ai" 
              class="w-full h-96 border-0" 
              title="AI Face Detection"
              allow="camera"
              loading="lazy">
            </iframe>
          </div>
        </div>
      </div>
    </div>

  init-statamic.sh: |
    #!/bin/sh
    
    # Script to initialize Statamic CMS and integrate iframes
    
    # Check if resources/views directory exists
    if [ ! -d /var/www/html/resources/views ]; then
      mkdir -p /var/www/html/resources/views
    fi
    
    # Create iframe template file
    echo "Creating iframe template..."
    cp /statamic-config/iframe-integration.blade.php /var/www/html/resources/views/
    
    # Add a new route for the integration page
    if ! grep -q "Route::get('/integrate" /var/www/html/routes/web.php; then
      echo "Adding route for the integration page..."
      echo "
    // Route for iframe integration page
    Route::get('/integrate', function () {
        return view('iframe-integration');
    });" >> /var/www/html/routes/web.php
    fi
    
    echo "Statamic configuration complete."
    
    # Continue with normal PHP-FPM and Nginx startup
    php-fpm &
    nginx -g 'daemon off;'

---
# MongoDB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Statamic PersistentVolumeClaims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-storage-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-content-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-resources-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:4.4
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None  # Headless service for StatefulSet

---
# Chat Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-backend
  labels:
    app: chat-backend
spec:
  replicas: 5  # 5 replicas as specified in requirements
  selector:
    matchLabels:
      app: chat-backend
  template:
    metadata:
      labels:
        app: chat-backend
    spec:
      containers:
      - name: chat-backend
        image: localhost:5000/chat-backend:latest  # Using private registry
        ports:
        - containerPort: 88
        env:
        - name: MONGODB_URI
          value: "mongodb://root:example@mongodb:27017/chat?authSource=admin"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 88
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 88
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Chat Backend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-backend
spec:
  selector:
    app: chat-backend
  ports:
  - port: 88
    targetPort: 88
  type: ClusterIP

---
# Chat Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend
  labels:
    app: chat-frontend
spec:
  replicas: 1  # 1 replica as specified in requirements
  selector:
    matchLabels:
      app: chat-frontend
  template:
    metadata:
      labels:
        app: chat-frontend
    spec:
      containers:
      - name: chat-frontend
        image: localhost:5000/chat-frontend:latest  # Using private registry
        ports:
        - containerPort: 90
        resources:
          limits:
            cpu: "300m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 90
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 90
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Chat Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend
spec:
  selector:
    app: chat-frontend
  ports:
  - port: 90
    targetPort: 90
  type: ClusterIP

---
# AI Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-backend
  labels:
    app: ai-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-backend
  template:
    metadata:
      labels:
        app: ai-backend
    spec:
      containers:
      - name: ai-backend
        image: localhost:5000/ai-backend:latest  # Using private registry
        ports:
        - containerPort: 89
        env:
        - name: PORT
          value: "89"
        - name: AZURE_STORAGE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: storage-connection-string
        - name: FACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: face-api-key
        - name: FACE_API_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: face-api-endpoint
        - name: SQL_USER
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-user
        - name: SQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-password
        - name: SQL_SERVER
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-server
        - name: SQL_DB
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: sql-db
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: temp-storage
          mountPath: /app/temp
      volumes:
      - name: temp-storage
        emptyDir: {}

---
# AI Backend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-backend
spec:
  selector:
    app: ai-backend
  ports:
  - port: 89
    targetPort: 89
  type: ClusterIP

---
# AI Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-frontend
  labels:
    app: ai-frontend
spec:
  replicas: 1  # 1 replica as specified in requirements
  selector:
    matchLabels:
      app: ai-frontend
  template:
    metadata:
      labels:
        app: ai-frontend
    spec:
      containers:
      - name: ai-frontend
        image: localhost:5000/ai-frontend:latest  # Using private registry
        ports:
        - containerPort: 91
        env:
        - name: REACT_APP_API_URL
          value: "http://ai-backend:89"  # Using service name for internal communication
        resources:
          limits:
            cpu: "300m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"

---
# AI Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend
spec:
  selector:
    app: ai-frontend
  ports:
  - port: 91
    targetPort: 91
  type: ClusterIP

---
# Statamic CMS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statamic
  labels:
    app: statamic
spec:
  replicas: 2  # 2 replicas as specified in requirements
  selector:
    matchLabels:
      app: statamic
  template:
    metadata:
      labels:
        app: statamic
    spec:
      containers:
      - name: statamic
        image: localhost:5000/statamic:latest  # Using private registry
        ports:
        - containerPort: 80
        env:
        - name: APP_ENV
          value: "production"
        - name: APP_KEY
          value: "base64:OhnkcxLhoN5uBZ2QjikXVT3pM/YC5kpyWl65hyCeNr8="
        - name: APP_DEBUG
          value: "false"
        - name: APP_URL
          value: "http://statamic"
        - name: DB_CONNECTION
          value: "sqlite"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        volumeMounts:
        - name: statamic-storage
          mountPath: /var/www/html/storage
        - name: statamic-content
          mountPath: /var/www/html/content
        - name: statamic-resources
          mountPath: /var/www/html/resources
        - name: statamic-config
          mountPath: /statamic-config
        # Override the default command to use our init script
        command: ["/bin/sh", "/statamic-config/init-statamic.sh"]
      volumes:
      - name: statamic-storage
        persistentVolumeClaim:
          claimName: statamic-storage-pvc
      - name: statamic-content
        persistentVolumeClaim:
          claimName: statamic-content-pvc
      - name: statamic-resources
        persistentVolumeClaim:
          claimName: statamic-resources-pvc
      - name: statamic-config
        configMap:
          name: statamic-iframe-integration
          defaultMode: 0755  # Make the scripts executable

---
# Statamic Service
apiVersion: v1
kind: Service
metadata:
  name: statamic
spec:
  selector:
    app: statamic
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Ingress Controller for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stf-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    # Enable WebSocket support
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/websocket-services: "chat-backend"
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: statamic
            port:
              number: 80
      - path: /chat
        pathType: Prefix
        backend:
          service:
            name: chat-frontend
            port:
              number: 90
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: chat-backend
            port:
              number: 88
      - path: /ai
        pathType: Prefix
        backend:
          service:
            name: ai-frontend
            port:
              number: 91
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ai-backend
            port:
              number: 89