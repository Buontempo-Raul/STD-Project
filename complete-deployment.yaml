---
# ConfigMap for non-sensitive app configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  AI_BACKEND_PORT: "89"
  AI_USE_MOCK_DATA: "false"
  CHAT_BACKEND_PORT: "88"
  CHAT_FRONTEND_PORT: "90"
  AI_FRONTEND_PORT: "91"
  APP_URL: "http://localhost"  # Change to your domain/IP if needed
  APP_ENV: "production"
  APP_DEBUG: "false"
  DB_CONNECTION: "sqlite"
  STORAGE_CONTAINER: "face-images"
---
# MongoDB PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# AI Backend PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-backend-claim0
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# Statamic Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-storage
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# Statamic Content PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-content
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# Statamic Resources PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-resources
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# Statamic Database PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: statamic-database
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: default
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-password
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - db.adminCommand('ping')
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-data
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: default
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongodb
---
# Chat Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-backend
  namespace: default
  labels:
    app: chat-backend
spec:
  replicas: 5  # As specified in the requirements
  selector:
    matchLabels:
      app: chat-backend
  strategy: {}
  template:
    metadata:
      labels:
        app: chat-backend
    spec:
      containers:
        - name: chat-backend
          image: raulbuontempo/chat-backend:latest
          ports:
            - containerPort: 88
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: CHAT_BACKEND_PORT
            - name: MONGODB_URI
              value: mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@mongodb:27017/chat?authSource=admin
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-username
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-password
          readinessProbe:
            httpGet:
              path: /
              port: 88
            initialDelaySeconds: 5
            periodSeconds: 10
---
# Chat Backend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-backend
  namespace: default
spec:
  ports:
    - port: 88
      targetPort: 88
  selector:
    app: chat-backend
---
# Chat Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend
  namespace: default
  labels:
    app: chat-frontend
spec:
  replicas: 1  # As specified in the requirements
  selector:
    matchLabels:
      app: chat-frontend
  strategy: {}
  template:
    metadata:
      labels:
        app: chat-frontend
    spec:
      containers:
        - name: chat-frontend
          image: raulbuontempo/chat-frontend:latest
          ports:
            - containerPort: 90
          readinessProbe:
            httpGet:
              path: /
              port: 90
            initialDelaySeconds: 10
            periodSeconds: 10
---
# Chat Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend
  namespace: default
spec:
  ports:
    - port: 90
      targetPort: 90
      name: http
  selector:
    app: chat-frontend
---
# AI Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-backend
  namespace: default
  labels:
    app: ai-backend
spec:
  replicas: 1  # As specified in the requirements
  selector:
    matchLabels:
      app: ai-backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ai-backend
    spec:
      containers:
        - name: ai-backend
          image: raulbuontempo/ai-backend:latest
          ports:
            - containerPort: 89
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: AI_BACKEND_PORT
            - name: USE_MOCK_DATA
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: AI_USE_MOCK_DATA
            - name: STORAGE_CONTAINER
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: storage_container
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: storage-connection-string
            - name: FACE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: face-api-key
            - name: FACE_API_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: face-api-endpoint
            - name: SQL_USER
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-user
            - name: SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-password
            - name: SQL_SERVER
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-server
            - name: SQL_DB
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-db
          readinessProbe:
            httpGet:
              path: /
              port: 89
            initialDelaySeconds: 15
            periodSeconds: 15
          volumeMounts:
            - mountPath: /app/temp
              name: ai-backend-claim0
      volumes:
        - name: ai-backend-claim0
          persistentVolumeClaim:
            claimName: ai-backend-claim0
---
# AI Backend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-backend
  namespace: default
spec:
  ports:
    - port: 89
      targetPort: 89
      name: http
  selector:
    app: ai-backend
---
# AI Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-frontend
  namespace: default
  labels:
    app: ai-frontend
spec:
  replicas: 1  # As specified in the requirements
  selector:
    matchLabels:
      app: ai-frontend
  strategy: {}
  template:
    metadata:
      labels:
        app: ai-frontend
    spec:
      containers:
        - name: ai-frontend
          image: raulbuontempo/ai-frontend:latest
          ports:
            - containerPort: 91
          env:
            - name: REACT_APP_API_URL
              value: http://ai-backend:89
          readinessProbe:
            httpGet:
              path: /
              port: 91
            initialDelaySeconds: 10
            periodSeconds: 10
---
# AI Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend
  namespace: default
spec:
  ports:
    - port: 91
      targetPort: 91
      name: http
  selector:
    app: ai-frontend
---
# Statamic Deployment with local template directory
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statamic
  namespace: default
  labels:
    app: statamic
spec:
  replicas: 2
  selector:
    matchLabels:
      app: statamic
  template:
    metadata:
      labels:
        app: statamic
    spec:
      initContainers:
      - name: setup-templates
        image: busybox
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Setting up templates from local directory..."
          mkdir -p /var/www/html/resources/views/errors
          
          # Check if template files exist in the mounted directory
          if [ -f "/templates/layout.antlers.html" ]; then
            cp /templates/layout.antlers.html /var/www/html/resources/views/
            echo "Copied layout.antlers.html"
          else
            echo "WARNING: /templates/layout.antlers.html not found!"
          fi
          
          if [ -f "/templates/home.antlers.html" ]; then
            cp /templates/home.antlers.html /var/www/html/resources/views/
            echo "Copied home.antlers.html"
          else
            echo "WARNING: /templates/home.antlers.html not found!"
          fi
          
          if [ -f "/templates/default.antlers.html" ]; then
            cp /templates/default.antlers.html /var/www/html/resources/views/
            echo "Copied default.antlers.html"
          else
            echo "WARNING: /templates/default.antlers.html not found!"
          fi
          
          if [ -f "/templates/errors/404.antlers.html" ]; then
            cp /templates/errors/404.antlers.html /var/www/html/resources/views/errors/
            echo "Copied errors/404.antlers.html"
          else
            echo "WARNING: /templates/errors/404.antlers.html not found!"
          fi
          
          # List copied templates
          echo "Templates in resources/views:"
          ls -la /var/www/html/resources/views/
          echo "Templates in resources/views/errors:"
          ls -la /var/www/html/resources/views/errors/
          
          chmod -R 755 /var/www/html/resources
          echo "Templates setup complete"
        volumeMounts:
        - name: statamic-resources
          mountPath: /var/www/html/resources
        - name: templates-volume
          mountPath: /templates
      containers:
      - name: statamic
        image: raulbuontempo/statamic:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a proper Nginx configuration file
          echo 'server {
              listen 80;
              server_name localhost;
              root /var/www/html/public;
              index index.php;
              charset utf-8;
              
              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }
              
              location = /favicon.ico { access_log off; log_not_found off; }
              location = /robots.txt  { access_log off; log_not_found off; }
              
              error_page 404 /index.php;
              
              location ~ \.php$ {
                  fastcgi_pass 127.0.0.1:9000;
                  fastcgi_index index.php;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;
              }
              
              location ~ /\.(?!well-known).* {
                  deny all;
              }
          }' > /etc/nginx/http.d/default.conf
          
          # Fix routes file to include proper Statamic routing
          cat > /var/www/html/routes/web.php << 'EOF'
          <?php
          use Illuminate\Support\Facades\Route;
          
          // Add the default Statamic route handling
          Route::statamic('/', 'home');
          Route::statamic('/{slug}', 'default');
          EOF
          
          # Set up minimal content (just a basic home page)
          mkdir -p /var/www/html/content/collections/pages
          echo -e "---\ntitle: Home\nid: home\ntemplate: home\n---\n# Welcome to Our Platform" > /var/www/html/content/collections/pages/home.md
          
          # Fix permissions
          chmod -R 777 /var/www/html/bootstrap/cache
          chmod -R 777 /var/www/html/storage
          chmod -R 777 /var/www/html/content
          chmod -R 755 /var/www/html/resources
          
          # Clear caches
          cd /var/www/html
          php artisan cache:clear
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          
          # Start services with supervisord
          exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
        ports:
        - containerPort: 80
        env:
        - name: APP_ENV
          value: "production"
        - name: APP_DEBUG
          value: "true"
        - name: APP_URL
          value: "http://localhost"
        - name: DB_CONNECTION
          value: "sqlite"
        - name: APP_KEY
          value: "base64:OhnkcxLhoN5uBZ2QjikXVT3pM/YC5kpyWl65hyCeNr8="
        - name: CACHE_DRIVER
          value: "file"
        volumeMounts:
        - name: statamic-storage
          mountPath: /var/www/html/storage
        - name: statamic-content
          mountPath: /var/www/html/content
        - name: statamic-resources
          mountPath: /var/www/html/resources
        - name: statamic-database
          mountPath: /var/www/html/database
        - name: bootstrap-cache
          mountPath: /var/www/html/bootstrap/cache
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 6
      volumes:
      - name: statamic-storage
        persistentVolumeClaim:
          claimName: statamic-storage
      - name: statamic-content
        persistentVolumeClaim:
          claimName: statamic-content
      - name: statamic-resources
        persistentVolumeClaim:
          claimName: statamic-resources
      - name: bootstrap-cache
        emptyDir: {}
      - name: statamic-database
        persistentVolumeClaim:
          claimName: statamic-database
      - name: templates-volume
        hostPath:
          path: /templates
          type: Directory
---
# Statamic Service - Exposed as LoadBalancer for external access
apiVersion: v1
kind: Service
metadata:
  name: statamic
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      name: http
  selector:
    app: statamic
---
# Nginx Ingress Controller for internal service routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"  # Increase max upload size for AI component
spec:
  rules:
  - http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: statamic
            port:
              number: 80
      - path: /chat(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: chat-frontend
            port:
              number: 90
      - path: /ws(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: chat-backend
            port:
              number: 88
      - path: /ai(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: ai-frontend
            port:
              number: 91
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: ai-backend
            port:
              number: 89