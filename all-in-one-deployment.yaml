# ConfigMap for non-sensitive application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  # AI Backend Configuration
  AI_BACKEND_PORT: "89"
  AI_USE_MOCK_DATA: "false"
  
  # Chat Backend Configuration
  CHAT_BACKEND_PORT: "88"

  # Frontend URLs
  CHAT_FRONTEND_PORT: "90"
  AI_FRONTEND_PORT: "91"
  APP_URL: "http://localhost"
  
  # CMS Configuration
  APP_ENV: "production"
  APP_DEBUG: "false"
  DB_CONNECTION: "sqlite"
  
  # Storage Container Settings
  STORAGE_CONTAINER: "face-detection"

  # WebSocket URL for chat (corrected to use internal service)
  CHAT_WS_URL: "ws://chat-backend:88/ws"

---
# Storage configurations for persistent data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-backend-temp
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# MongoDB Deployment - Stores chat messages
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: default
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-password
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - db.adminCommand('ping')
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: default
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongodb
---
# Chat Backend Deployment - Node.js with WebSockets - 5 replicas
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-backend
  namespace: default
  labels:
    app: chat-backend
spec:
  replicas: 5
  selector:
    matchLabels:
      app: chat-backend
  template:
    metadata:
      labels:
        app: chat-backend
    spec:
      containers:
        - name: chat-backend
          image: localhost:32000/chat-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 88
          env:
            - name: PORT
              value: "88"
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-uri
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-username
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-root-password
            - name: REDIS_URL
              value: "redis://redis:6379"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
# Chat Backend Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: chat-backend
  namespace: default
spec:
  ports:
    - port: 88
      targetPort: 88
  selector:
    app: chat-backend
---
# Chat Backend NodePort Service (External access)
# apiVersion: v1
# kind: Service
# metadata:
#   name: chat-backend-np
#   namespace: default
# spec:
#   type: NodePort
#   ports:
#     - port: 88
#       targetPort: 88
#       nodePort: 30088
#       protocol: TCP
#   selector:
#     app: chat-backend
#   sessionAffinity: ClientIP
---
# Chat Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend
  namespace: default
  labels:
    app: chat-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-frontend
  template:
    metadata:
      labels:
        app: chat-frontend
    spec:
      containers:
        - name: chat-frontend
          env:
          - name: REACT_APP_CHAT_WS_URL
            valueFrom:
              configMapKeyRef:
                name: app-config
                key: CHAT_WS_URL
          image: localhost:32000/chat-frontend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 90
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
# Chat Frontend Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend
  namespace: default
spec:
  ports:
    - port: 90
      targetPort: 90
  selector:
    app: chat-frontend
---
# Chat Frontend NodePort Service (External access)
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend-np
  namespace: default
spec:
  type: NodePort
  ports:
    - port: 90
      targetPort: 90
      nodePort: 30090
      protocol: TCP
  selector:
    app: chat-frontend
---
# AI Backend Deployment
# AI Backend Deployment (Updated)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-backend
  namespace: default
  labels:
    app: ai-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-backend
  template:
    metadata:
      labels:
        app: ai-backend
    spec:
      containers:
        - name: ai-backend
          image: localhost:32000/ai-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 89
          env:
            - name: PORT
              value: "89"
            - name: USE_MOCK_DATA
              value: "false"  # Set to true for testing without Azure dependencies
            - name: STORAGE_CONTAINER
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: STORAGE_CONTAINER
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: storage-connection-string
            - name: FACE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: face-api-key
            - name: FACE_API_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: face-api-endpoint
            - name: SQL_USER
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-user
            - name: SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-password
            - name: SQL_SERVER
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-server
            - name: SQL_DB
              valueFrom:
                secretKeyRef:
                  name: azure-secrets
                  key: sql-db
          volumeMounts:
            - mountPath: /app/temp
              name: ai-backend-temp
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          # Add health check like the chat component has
          readinessProbe:
            httpGet:
              path: /
              port: 89
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 89
            initialDelaySeconds: 15
            periodSeconds: 20
      volumes:
        - name: ai-backend-temp
          persistentVolumeClaim:
            claimName: ai-backend-temp
---
# AI Backend Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: ai-backend
  namespace: default
spec:
  ports:
    - port: 89
      targetPort: 89
  selector:
    app: ai-backend
---
# AI Backend NodePort Service (External access)
# apiVersion: v1
# kind: Service
# metadata:
#   name: ai-backend-np
#   namespace: default
# spec:
#   type: NodePort
#   ports:
#     - port: 89
#       targetPort: 89
#       nodePort: 30089
#       protocol: TCP
#   selector:
#     app: ai-backend
---
# AI Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-frontend
  namespace: default
  labels:
    app: ai-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-frontend
  template:
    metadata:
      labels:
        app: ai-frontend
    spec:
      containers:
        - name: ai-frontend
          image: localhost:32000/ai-frontend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 91
          # Remove REACT_APP_API_URL since we're using relative URLs now
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
# AI Frontend Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend
  namespace: default
spec:
  ports:
    - port: 91
      targetPort: 91
  selector:
    app: ai-frontend
---
# AI Frontend NodePort Service (External access)
apiVersion: v1
kind: Service
metadata:
  name: ai-frontend-np
  namespace: default
spec:
  type: NodePort
  ports:
    - port: 91
      targetPort: 91
      nodePort: 30091
      protocol: TCP
  selector:
    app: ai-frontend
---
# Statamic CMS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statamic
  namespace: default
  labels:
    app: statamic
spec:
  replicas: 2
  selector:
    matchLabels:
      app: statamic
  template:
    metadata:
      labels:
        app: statamic
    spec:
      containers:
      - name: statamic
        image: localhost:32000/statamic:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_ENV
        - name: APP_DEBUG
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_DEBUG
        - name: DB_CONNECTION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_CONNECTION
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Statamic CMS NodePort Service (External access)
apiVersion: v1
kind: Service
metadata:
  name: statamic-np
  namespace: default
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
      protocol: TCP
  selector:
    app: statamic
---
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: default
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis